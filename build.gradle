/*
 *
 * Copyright 2015-2021 Martin Goellnitz
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 *
 */
plugins {
  id 'net.ossindex.audit' version '0.4.11'
  id 'io.franzbecker.gradle-lombok' version '4.0.0'
}

apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'jacoco'
apply plugin: 'pmd'

defaultTasks 'clean', 'build'

println "Gradle: ${gradle.gradleVersion}"

version='0.1-SNAPSHOT'

repositories {
  jcenter()
}

dependencies {
  implementation 'org.slf4j:slf4j-api:1.7.32'
  runtimeOnly    'ch.qos.logback:logback-classic:1.2.6'
  // output is achieved via logging through special logback.groovy - this is why groovy is needed here
  runtimeOnly    'org.codehaus.groovy:groovy:3.0.9'
  implementation 'org.apache.commons:commons-lang3:3.12.0'
  implementation 'org.apache.commons:commons-collections4:4.4'
  implementation 'commons-cli:commons-cli:1.4'

  implementation 'org.graphstream:gs-core:1.3'
  implementation 'org.graphstream:gs-ui:1.3'
  implementation 'org.scala-lang:scala-library:2.13.6' // override scala lib for graphstream due to vulnerability
  implementation 'junit:junit:4.13.2' // introduce overriden junit lib for graphstream due to vulnerability

  implementation 'net.sf.jung:jung-api:2.1.1'
  implementation 'net.sf.jung:jung-graph-impl:2.1.1'
  implementation 'net.sf.jung:jung-visualization:2.1.1'
  implementation 'net.sf.jung:jung-algorithms:2.1.1'
  implementation 'net.sf.jung:jung-io:2.1.1'
  implementation 'net.sf.jung:jung-graph-impl:2.1.1'
  implementation 'com.google.guava:guava:31.0.1-jre' // override guava for jung due to vulnerability

  implementation 'org.javabits.jgrapht:jgrapht-core:0.9.3'

  testImplementation 'org.testng:testng:7.4.0'
  // security overrides for testng and audit
  testImplementation 'junit:junit:4.13.2'
}

lombok {
  version = "1.18.22"
  sha256 = "39f3922deb679b1852af519eb227157ef2dd0a21eec3542c8ce1b45f2df39742"
}

pmd {
  ruleSets = []
  ruleSetFiles = files('pmd.xml')
  sourceSets = [sourceSets.main]
  toolVersion = '6.34.0'
}

test {
  useTestNG() {
  }
}

jacoco {
  toolVersion = '0.8.7'
}

jacocoTestReport {
  reports {
    xml.enabled = true // coveralls plugin depends on xml format report
    html.enabled = true
  }
}

mainClassName='de.provocon.stratigraph.command.Analyse'

application {
  applicationName = 'stg'
}

startScripts {
  doLast {
    // Add more reasonable memory
    unixScript.text = unixScript.text.replace('DEFAULT_JVM_OPTS=""', 'DEFAULT_JVM_OPTS="-ms1280m -mx1536m -Xms1280m -Xmx1536m"')
    windowsScript.text = windowsScript.text.replace('DEFAULT_JVM_OPTS=', 'DEFAULT_JVM_OPTS=-ms1280m -mx1536m -Xms1280m -Xmx1536m')
  }
}

// Just my test target
run {
  args "-j", "-i", "-d", "/home/martin/proj/tangram/system"
}

// Basic code setup
sourceCompatibility = 1.8
targetCompatibility = 1.8
compileJava.options.encoding = 'UTF-8'
compileJava.options.deprecation = true

// Don't issue tar archive
distTar.enabled = false
